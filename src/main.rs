#![allow(non_snake_case, clippy::needless_return, dead_code)]

mod bit_string;
use crate::bit_string::BitString;

pub mod keccak;
use crate::keccak::Keccak;

trait HashFunction {
    fn init(digest_size: usize) -> Self;
    fn update(&mut self, input_bitstring: &BitString);
    fn finalise(&mut self) -> String;
}

struct SHA3 {
    keccak_instance: Keccak,
    digest_size: usize,
}

impl HashFunction for SHA3 {
    fn init(digest_size: usize) -> SHA3 {
        if digest_size != 224 && digest_size != 256 && digest_size != 384 && digest_size != 512 {
            panic!("Invalid digest size. Valid sizes are 224, 256, 384, and 512.");
        }
        return SHA3 {
            keccak_instance: Keccak::init(2 * digest_size),
            digest_size,
        };
    }

    fn update(&mut self, input_bitstring: &BitString) {
        self.keccak_instance.update_buffer(input_bitstring);
    }

    fn finalise(&mut self) -> String {
        // Append the string "01" to the message
        let zero_one = BitString::from_bitstring(vec![0x2_u64], 2);

        self.keccak_instance.update_buffer(&zero_one);
        let Z = self.keccak_instance.finalise(self.digest_size);
        return Z.to_string();
    }
}

trait ExtendableOutputFunction {
    fn init(sec_param: usize) -> Self;
    fn update(&mut self, input_bitstring: &BitString);
    fn finalise(&mut self, digest_size: usize) -> String;
}

struct SHAKE {
    keccak_instance: Keccak,
}

impl ExtendableOutputFunction for SHAKE {
    fn init(sec_param: usize) -> SHAKE {
        if sec_param != 128 && sec_param != 256 {
            panic!("Invalid security parameter. Valid sizes are 128 and 256.");
        }

        return SHAKE {
            keccak_instance: Keccak::init(2 * sec_param),
        };
    }

    fn update(&mut self, input_bitstring: &BitString) {
        self.keccak_instance.update_buffer(input_bitstring);
    }

    fn finalise(&mut self, digest_size: usize) -> String {
        // Append the string "1111" to the message
        let four_ones = BitString::from_bitstring(vec![0xF_u64], 4);
        self.keccak_instance.update_buffer(&four_ones);

        return self.keccak_instance.finalise(digest_size).to_string();
    }
}

fn main() {
    let test_string = BitString::from_string("The quick brown fox jumps over the lazy dog");
    
    let mut sha_3_224 = SHA3::init(224);
    sha_3_224.update(&test_string);
    println!("{}", sha_3_224.finalise());

    let mut sha_3_256 = SHA3::init(256);
    sha_3_256.update(&test_string);
    println!("{}", sha_3_256.finalise());

    let mut sha_3_384 = SHA3::init(384);
    sha_3_384.update(&test_string);
    println!("{}", sha_3_384.finalise());

    let mut sha_3_512 = SHA3::init(512);
    sha_3_512.update(&test_string);
    println!("{}", sha_3_512.finalise());

    let mut shake_128 = SHAKE::init(128);
    shake_128.update(&test_string);
    println!("{}", shake_128.finalise(256));
    
    let mut shake_256 = SHAKE::init(256);
    shake_256.update(&test_string);
    println!("{}", shake_256.finalise(256));
}

#[cfg(test)]
mod keccak_tests {

    use super::*;

    #[test]
    fn test_0_string() {
        let test_string = BitString::new();

        let mut sha_3_224 = SHA3::init(224);
        sha_3_224.update(&test_string);
        assert_eq!(
            sha_3_224.finalise(),
            "6B4E03423667DBB7 3B6E15454F0EB1AB D4597F9A1B078E3F 5B5A6BC7"
        );

        let mut sha_3_256 = SHA3::init(256);
        sha_3_256.update(&test_string);
        assert_eq!(
            sha_3_256.finalise(),
            "A7FFC6F8BF1ED766 51C14756A061D662 F580FF4DE43B49FA 82D80A4B80F8434A"
        );

        let mut sha_3_384 = SHA3::init(384);
        sha_3_384.update(&test_string);
        assert_eq!(sha_3_384.finalise(), "0C63A75B845E4F7D 01107D852E4C2485 C51A50AAAA94FC61 995E71BBEE983A2A C3713831264ADB47 FB6BD1E058D5F004");

        let mut sha_3_512 = SHA3::init(512);
        sha_3_512.update(&test_string);
        assert_eq!(sha_3_512.finalise(), "A69F73CCA23A9AC5 C8B567DC185A756E 97C982164FE25859 E0D1DCC1475C80A6 15B2123AF1F5F94C 11E3E9402C3AC558 F500199D95B6D3E3 01758586281DCD26");

        let mut shake_128 = SHAKE::init(128);
        shake_128.update(&test_string);
        assert_eq!(
            shake_128.finalise(256),
            "7F9C2BA4E88F827D 616045507605853E D73B8093F6EFBC88 EB1A6EACFA66EF26"
        );

        let mut shake_256 = SHAKE::init(256);
        shake_256.update(&test_string);
        assert_eq!(shake_256.finalise(512), "46B9DD2B0BA88D13 233B3FEB743EEB24 3FCD52EA62B81B82 B50C27646ED5762F D75DC4DDD8C0F200 CB05019D67B592F6 FC821C49479AB486 40292EACB3B7C4BE");
    }

    #[test]
    fn test_5_bit_string() {
        let test_string = BitString::from_bitstring(vec![0x13_u64], 5);

        let mut sha_3_224 = SHA3::init(224);
        sha_3_224.update(&test_string);
        assert_eq!(
            sha_3_224.finalise(),
            "FFBAD5DA96BAD717 89330206DC6768EC AEB1B32DCA6B3301 489674AB"
        );

        let mut sha_3_256 = SHA3::init(256);
        sha_3_256.update(&test_string);
        assert_eq!(
            sha_3_256.finalise(),
            "7B0047CF5A456882 363CBF0FB05322CF 65F4B7059A46365E 830132E3B5D957AF"
        );

        let mut sha_3_384 = SHA3::init(384);
        sha_3_384.update(&test_string);
        assert_eq!(sha_3_384.finalise(), "737C9B491885E9BF 7428E792741A7BF8 DCA9653471C3E148 473F2C236B6A0A64 55EB1DCE9F779B4B 6B237FEF171B1C64");

        let mut sha_3_512 = SHA3::init(512);
        sha_3_512.update(&test_string);
        assert_eq!(sha_3_512.finalise(), "A13E01494114C098 00622A70288C4321 21CE70039D753CAD D2E006E4D961CB27 544C1481E5814BDC EB53BE6733D5E099 795E5E81918ADDB0 58E22A9F24883F37");

        let mut shake_128 = SHAKE::init(128);
        shake_128.update(&test_string);
        assert_eq!(shake_128.finalise

        let mut shake_256 = SHAKE::init(256);
        shake_256.update(&test_string);
        assert_eq!(shake_256.finalise(4096), "48A5C11ABAEEFF09 2F3646EF0D6B3D3F F76C2F55F9C732AC 6470C03764008212 E21B1467778B1819 89F88858211B45DF 8799CF961F800DFA C99E644039E2979A 4016F5456FF421C5 B385DA2B855DA7E3 1C8C2E8E4BA41EB4 095CB999D9759CB4 0358DA8562A2E613 49E05A2E13F1B74E C9E69F5B426DC741 38FFCDC571C32B39 B9F55563E1A99DC4 22C306026D6A0F9D E85162B386794CA0 688B764B3D32200C C459749732A0F3A3 41C0EFC96A22C63B AD7D96CC9BA4768C 6FCFA1F200107CF9 FAE5C0D754958C5A 756B376A3BE69F88 074F200E9E95A8CA 5BCF969998DB1DC3 7D0D3D916F6CAAB3 F03782C9C44A2E14 E80786BECE4587B9 EF82CBF454E0E34B D175AE57D36AF4E7 26B221332CED36C8 CE2E06203C656AE8 DA037D08E7160B48 0C1A8516BF06DD97 BF4AA4C0249310DC 0B065DC639576355 384D165C6A509B12 F7BBD1E15B22BCE0 2FA048DDFAACF741 5F49B6324C1D067B 5264E1125F7F7542 7F312BD9346EB4E4 00B1F7CB31288C9E 3F735ECA9CED0DB8 88E2E2F402243BD6 4618A23E10F9C229 397440542D0AB1B2 E10DACC5C95E597F 2C7EA38438105F97 803DBB03FCC0FD41 6B0905A41D184DEB 238905775891F935 01FB4176A3BD6C46 4461D36EE8B008AA BD9E26A34055E80C 8C813EEBA07F728A B32B15605AD161A0 669F6FCE5C5509FB B6AFD24AEACC5FA4 A51523E6B173246E D4BFA521D74FC6BB");
    }

    #[test]
    fn test_30_bit_string() {
        let test_string = BitString::from_bitstring(vec![0x197B5853], 30);

        let mut sha_3_224 = SHA3::init(224);
        sha_3_224.update(&test_string);
        assert_eq!(
            sha_3_224.finalise(),
            "D666A514CC9DBA25 AC1BA69ED3930460 DEAAC9851B5F0BAA B007DF3B"
        );

        let mut sha_3_256 = SHA3::init(256);
        sha_3_256.update(&test_string);
        assert_eq!(
            sha_3_256.finalise(),
            "C8242FEF409E5AE9 D1F1C857AE4DC624 B92B19809F62AA8C 07411C54A078B1D0"
        );

        let mut sha_3_384 = SHA3::init(384);
        sha_3_384.update(&test_string);
        assert_eq!(sha_3_384.finalise(), "955B4DD1BE03261B D76F807A7EFD4324 35C417362811B8A5 0C564E7EE9585E1A C7626DDE2FDC030F 876196EA267F08C3");

        let mut sha_3_512 = SHA3::init(512);
        sha_3_512.update(&test_string);
        assert_eq!(sha_3_512.finalise(), "9834C05A11E1C5D3 DA9C740E1C106D9E 590A0E530B6F6AAA 7830525D075CA5DB 1BD8A6AA981A2861 3AC334934A01823C D45F45E49B6D7E69 17F2F16778067BAB");

        let mut shake_128 = SHAKE::init(128);
        shake_128.update(&test_string);
        assert_eq!(shake_128.finalise

        let mut shake_256 = SHAKE::init(256);
        shake_256.update(&test_string);
        assert_eq!(shake_256.finalise(4096), "465D081DFF875E39 6200E4481A3E9DCD 88D079AA6D66226C B6BA454107CB81A7 841AB02960DE279C CBE34B42C36585AD 86964DB0DB52B6E7 B4369ECE8F724858 9BA78AB1828FFC33 5CB12397119BFD2B 87EB7898AEB956B6 F23DDF0BD4004386 A8E526554EF4E483 FACEE30DD32E204F FF8C36BBD602A576 D139089C75A80502 66FCBF721E4443DE 4645832922EB8AAE 39D1F57284536481 7B00335438999400 23F2E965A60A80EB 221EB19DC57B1212 91564C6F693583B3 AC7C6F272F4F67A1 9A7678D4234B0BF4 A2EBC08AA235B978 8DB787161F661702 2865C0EF9AA53380 2D136CDBC7AEBA53 2ACF1BE183B0295A B0E33A2EF69BE356 DAAF309687153E2F 99A1243609D60312 6A8C823E8843E459 BFC72B30691CDCC3 DDB27CF028AFD51E 4437EE3B71C0C1EC 87A93436F0C247B7 E8C50CE96825C970 29997A74C318AFAC AA18A0180BC7F2F0 F1C5E7EF1A2D183A C7EE7E4915C3B68C 30978AB6C4281934 41DF4705B722CE25 A08A1FADCA0EEF1F AFE83ADF13021D52 0DE5C827FF9A97B7 5546193A9B923F05 90385DC4BFF7C49D 4915B5A365DB4C84 DDCB185DE8F9EEB3 34965A42F1381C8B ADC22BA1F8EE4C0E 4DAAF7A88E7F42DD B8148F3BF8D3B8D7 4F098155A37CB4CB 27876B85DA602E5C 789C10E03BE73407 BAB8C49213F8C74E 1266CE9B11286E67 4CA9C10C9C995504 9A66E9051D9A2B1F C9AFE26798E9CEC6");
    }

    #[test]
    fn test_1600_bit_string() {
        let test_string = BitString::from_bitstring(
            vec![
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
            ],
            1600,
        );

        let mut sha_3_224 = SHA3::init(224);
        sha_3_224.update(&test_string);
        assert_eq!(
            sha_3_224.finalise(),
            "9376816ABA503F72 F96CE7EB65AC095D EEE3BE4BF9BBC2A1 CB7E11E0"
        );

        let mut sha_3_256 = SHA3::init(256);
        sha_3_256.update(&test_string);
        assert_eq!(
            sha_3_256.finalise(),
            "79F38ADEC5C20307 A98EF76E8324AFBF D46CFD81B22E3973 C65FA1BD9DE31787"
        );

        let mut sha_3_384 = SHA3::init(384);
        sha_3_384.update(&test_string);
        assert_eq!(sha_3_384.finalise(), "1881DE2CA7E41EF9 5DC4732B8F5F002B 189CC1E42B74168E D1732649CE1DBCDD 76197A31FD55EE98 9F2D7050DD473E8F");

        let mut sha_3_512 = SHA3::init(512);
        sha_3_512.update(&test_string);
        assert_eq!(sha_3_512.finalise(), "E76DFAD22084A8B1 467FCF2FFA58361B EC7628EDF5F3FDC0 E4805DC48CAEECA8 1B7C13C30ADF52A3 659584739A2DF46B E589C51CA1A4A841 6DF6545A1CE8BA00");

        let mut shake_128 = SHAKE::init(128);
        shake_128.update(&test_string);
        assert_eq!(shake_128.finalise

        let mut shake_256 = SHAKE::init(256);
        shake_256.update(&test_string);
        assert_eq!(shake_256.finalise(4096), "CD8A920ED141AA04 07A22D59288652E9 D9F1A7EE0C1E7C1C A699424DA84A904D 2D700CAAE7396ECE 96604440577DA4F3 AA22AEB8857F961C 4CD8E06F0AE6610B 1048A7F64E1074CD 629E85AD7566048E FC4FB500B486A330 9A8F26724C0ED628 001A1099422468DE 726F1061D99EB9E9 3604D5AA7467D4B1 BD6484582A384317 D7F47D750B8F5499 512BB85A226C4243 556E696F6BD072C5 AA2D9B69730244B5 6853D16970AD817E 213E470618178001 C9FB56C54FEFA5FE E67D2DA524BB3B0B 61EF0E9114A92CDB B6CCCB98615CFE76 E3510DD88D1CC28F F99287512F24BFAF A1A76877B6F37198 E3A641C68A7C42D4 5FA7ACC10DAE5F3C EFB7B735F12D4E58 9F7A456E78C0F5E4 C4471FFFA5E4FA05 14AE974D8C264851 3B5DB494CEA84715 6D277AD0E141C24C 7839064CD08851BC 2E7CA109FD4E251C 35BB0A04FB05B364 FF8C4D8B59BC303E 25328C09A882E952 518E1A8AE0FF265D 61C465896973D749 0499DC639FB8502B 39456791B1B6EC5B CC5D9AC36A6DF622 A070D43FED781F5F 149F7B62675E7D1A 4D6DEC48C1C71645 86EAE06A51208C0B 791244D307726505 C3AD4B26B6822377 257AA152037560A7 39714A3CA79BD605 547C9B78DD1F596F 2D4F1791BC689A0E 9B799A37339C0427 5733740143EF5D2B 58B96A363D4E0807 6A1A9D7846436E4D CA5728B6F760EEF0 CA92BF0BE5615E96 959D767197A0BEEB");
    }

    #[test]
    fn test_1605_bit_string() {
        let test_string = BitString::from_bitstring(
            vec![
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0x03_u64,
            ],
            1605,
        );

        let mut sha_3_224 = SHA3::init(224);
        sha_3_224.update(&test_string);
        assert_eq!(
            sha_3_224.finalise(),
            "22D2F7BB0B173FD8 C19686F9173166E3 EE62738047D7EADD 69EFB228"
        );

        let mut sha_3_256 = SHA3::init(256);
        sha_3_256.update(&test_string);
        assert_eq!(
            sha_3_256.finalise(),
            "81EE769BED095086 2B1DDDED2E84AAA6 AB7BFDD3CEAA471B E31163D40336363C"
        );

        let mut sha_3_384 = SHA3::init(384);
        sha_3_384.update(&test_string);
        assert_eq!(sha_3_384.finalise(), "A31FDBD8D576551C 21FB1191B54BDA65 B6C5FE97F0F4A691 03424B43F7FDB835 979FDBEAE8B3FE16 CB82E587381EB624");

        let mut sha_3_512 = SHA3::init(512);
        sha_3_512.update(&test_string);
        assert_eq!(sha_3_512.finalise(), "FC4A167CCB31A937 D698FDE82B04348C 9539B28F0C9D3B45 05709C03812350E4 990E9622974F6E57 5C47861C0D2E638C CFC2023C365BB60A 93F528550698786B");

        let mut shake_128 = SHAKE::init(128);
        shake_128.update(&test_string);
        assert_eq!(shake_128.finalise(4096), "4AC38EBD1678B4A4 52792C5673F9777D 36B55451AAAE2424 924942D318A2F6F5 1BBC837DCC7022C5 403B69D29AC99A74 5F06D06F2A41B0CC 243CD270FA44D430 65AF00D2AD358BD5 A5D06D331BC230CD 8DDA4655628F9102 711ADAFB7636C160 B2D25EC6235A2FE0 F37394D87FC5FFD7 DBF1993E558AEBEA 6C61E907188C61F5 FCDE278E264F958F FD7B3382DC10139B 625E1241AB5BBC2A 1FBCAC31A335CFC7 B20E427712246CBB 55232259A7EF1602 BD56F6567D66942D 4A7149F4222210B0 74EA54154B38E8FD FA0DCF4FA3ECD215 4E8318A6578B535D BCFC217A3CAB5253 2965846F89781457 025563E2DC15CC3A F902BA2AD280FFBB BFA4C52B60FA41BA C21F4AB235362681 19FC98CD982DA5CD 5DA21E1B5692D471 05DE9F1E0132C6FE 315D67FA464997C2 AB5533C79F98E6E6 4FF80802A7FE96CA 04A81F885527370A 2206B10B3936DD81 B8246353F4CD9051 1089268D744F210A C689D49D2875054A 727B604D13D269B3 7190D427C7D15CCC DCD7870E0B8ADBEB 977111A9BCF7781A 161356A5941C7999 07EF9D3B1A441F09 515F2831C4FAFDE3 DC7C1E9B5AA57D3E 83CD6734DA3D8B9E F3FC448805EA29C9 9CBA6B352BCABE2F D970AE9580D2BF25 152B960E6B806D87 D7D0608B247F6108 9E298692C27F19C5 2D03EBE395A36806 AD540BEC2D046C18 E355FAF8313D2EF8 995EE6AAE42568F3 14933E3A21E5BE40");

        let mut shake_256 = SHAKE::init(256);
        shake_256.update(&test_string);
        assert_eq!(shake_256.finalise
    }

    #[test]
    fn test_1630_bit_string() {
        let test_string = BitString::from_bitstring(
            vec![
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0xA3A3A3A3A3A3A3A3_u64,
                0x23A3A3A3_u64,
            ],
            1630,
        );

        let mut sha_3_224 = SHA3::init(224);
        sha_3_224.update(&test_string);
        assert_eq!(
            sha_3_224.finalise(),
            "4E907BB1057861F2 00A599E9D4F85B02 D88453BF5B8ACE9A C589134C"
        );

        let mut sha_3_256 = SHA3::init(256);
        sha_3_256.update(&test_string);
        assert_eq!(
            sha_3_256.finalise(),
            "52860AA301214C61 0D922A6B6CAB981C CD06012E54EF689D 744021E738B9ED20"
        );

        let mut sha_3_384 = SHA3::init(384);
        sha_3_384.update(&test_string);
        assert_eq!(sha_3_384.finalise(), "3485D3B280BD384C F4A777844E946781 73055D1CBC40C7C2 C3833D9EF1234517 2D6FCD31923BB879 5AC81847D3D8855C");

        let mut sha_3_512 = SHA3::init(512);
        sha_3_512.update(&test_string);
        assert_eq!(sha_3_512.finalise(), "CF9A30AC1F1F6AC0 916F9FEF1919C595 DEBE2EE80C854212 10FDF05F1C6AF73A A9CAC881D0F91DB6 D034A2BBADC1CF7F BCB2ECFA9D191D3A 5016FB3FAD8709C9");

        let mut shake_128 = SHAKE::init(128);
        shake_128.update(&test_string);
        assert_eq!(shake_128.finalise

        let mut shake_256 = SHAKE::init(256);
        shake_256.update(&test_string);
        assert_eq!(shake_256.finalise(4096), "8A8325079B0FC326 5D52F59855CAFE65 5DF438AA639F6FEC 991F2494330CE32F A37F7DB90F6966D8 E4A46E50C5EDE57B 9B8F082A96627F73 0475029A619229D8 4F432ED69FD05923 4D4D7DD358E8393F 6A36A45CCF041F90 FC0A4E5802D73063 D36531336A0090EC FE1A4D4D29AA824B A42B4937B4BB98F4 F33A0E3BD8B511E6 9528D59537110D75 21FB78ACA018DF76 160F54A3421B8414 9264ED032F6DCE46 7A731A8E34048E3A 46E98039DF3C328D EBFBE5D1BC8BE7FF 4EF8917B01F0B789 3672492D6EE5C71D F2D0531F8B684764 BA0A2B57EC6A4F60 BA4F36FE2DB0E65A D7AA5F14F3EF9F34 A0AB5BC33D488733 BA36BF4B2B4FCE02 8EFF8C6CE03B192C F075CC9F00D29C0E 06C35C4489D27F07 FA49A91CA92471E3 4DAB7787AE24A6E0 F309EF0BA53F7C8B 2992520A07BEDD50 9A0B6DBEA570A596 0ED624826DD8ECD1 915C87327E74491C 405A7411C12C0D44 97512689BD7F5ADB EDB02C6D2E68474E 8BF31B884040818F 4BCA03A45217EAC7 083AD3A33CB8477A 04C9E3266A133477 DE45E71830A40EB0 D075AFCCFCD9DC54 8D0D529460EA7AC2 ADAC722E7678EF59 7DD3B495BD7D1A8F F39448BBAB1DC6A8 8481801CF5A8010E 873C31E479A5E3DB 3D4E67D1D948E67C C66FD75A4A19C120 662EF55977BDDBAC 0721C80D69902693 C83D5EF7BC27EFA3 93AF4C439FC39958 E0E75537358802EF 0853B7470B0F19AC");
    }
}
